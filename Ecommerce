package com.example.ecommerce;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;
import javax.annotation.PostConstruct;
import java.util.*;

@SpringBootApplication
@RestController
@RequestMapping("/api")
public class EcommerceApp {

    public static void main(String[] args) {
        SpringApplication.run(EcommerceApp.class, args);
    }

    // Models
    static class User {
        String username;
        String password;
        String role; // "ADMIN" or "CUSTOMER"

        public User(String u, String p, String r) {
            this.username = u;
            this.password = p;
            this.role = r;
        }
    }

    static class Product {
        int id;
        String name;
        double price;

        public Product(int i, String n, double p) {
            this.id = i;
            this.name = n;
            this.price = p;
        }
    }

    static class Order {
        String username;
        List<Product> products;
        double total;

        public Order(String u, List<Product> p) {
            this.username = u;
            this.products = p;
            this.total = p.stream().mapToDouble(prod -> prod.price).sum();
        }
    }

    // In-memory stores
    Map<String, User> users = new HashMap<>();
    Map<String, List<Product>> carts = new HashMap<>();
    List<Product> productList = new ArrayList<>();
    List<Order> orders = new ArrayList<>();
    int productId = 1;

    // Temporary auth session map (username-token)
    Map<String, String> sessions = new HashMap<>();

    @PostConstruct
    public void init() {
        users.put("admin", new User("admin", "admin", "ADMIN"));
        users.put("user", new User("user", "user", "CUSTOMER"));
    }

    // --------- Auth ----------
    @PostMapping("/signup")
    public ResponseEntity<String> signup(@RequestParam String username, @RequestParam String password, @RequestParam String role) {
        if (users.containsKey(username)) return ResponseEntity.status(400).body("User already exists");
        users.put(username, new User(username, password, role.toUpperCase()));
        return ResponseEntity.ok("Signup successful");
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestParam String username, @RequestParam String password) {
        User user = users.get(username);
        if (user == null || !user.password.equals(password)) return ResponseEntity.status(401).body("Invalid credentials");
        String token = UUID.randomUUID().toString();
        sessions.put(token, username);
        return ResponseEntity.ok("Login successful. Your token: " + token);
    }

    private String validateToken(String token) {
        return sessions.get(token);
    }

    private boolean isAdmin(String username) {
        return users.containsKey(username) && users.get(username).role.equals("ADMIN");
    }

    // --------- Product ----------
    @PostMapping("/products")
    public ResponseEntity<String> addProduct(@RequestHeader("token") String token, @RequestParam String name, @RequestParam double price) {
        String user = validateToken(token);
        if (user == null || !isAdmin(user)) return ResponseEntity.status(403).body("Unauthorized");
        productList.add(new Product(productId++, name, price));
        return ResponseEntity.ok("Product added");
    }

    @GetMapping("/products")
    public ResponseEntity<List<Product>> listProducts() {
        return ResponseEntity.ok(productList);
    }

    // --------- Cart ----------
    @PostMapping("/cart")
    public ResponseEntity<String> addToCart(@RequestHeader("token") String token, @RequestParam int productId) {
        String user = validateToken(token);
        if (user == null) return ResponseEntity.status(403).body("Unauthorized");
        Product p = productList.stream().filter(prod -> prod.id == productId).findFirst().orElse(null);
        if (p == null) return ResponseEntity.status(404).body("Product not found");
        carts.putIfAbsent(user, new ArrayList<>());
        carts.get(user).add(p);
        return ResponseEntity.ok("Added to cart");
    }

    @GetMapping("/cart")
    public ResponseEntity<?> viewCart(@RequestHeader("token") String token) {
        String user = validateToken(token);
        if (user == null) return ResponseEntity.status(403).body("Unauthorized");
        return ResponseEntity.ok(carts.getOrDefault(user, new ArrayList<>()));
    }

    // --------- Order ----------
    @PostMapping("/order")
    public ResponseEntity<String> placeOrder(@RequestHeader("token") String token) {
        String user = validateToken(token);
        if (user == null) return ResponseEntity.status(403).body("Unauthorized");
        List<Product> cart = carts.getOrDefault(user, new ArrayList<>());
        if (cart.isEmpty()) return ResponseEntity.status(400).body("Cart is empty");
        orders.add(new Order(user, new ArrayList<>(cart)));
        carts.put(user, new ArrayList<>()); // Clear cart
        return ResponseEntity.ok("Order placed successfully");
    }

    @GetMapping("/orders")
    public ResponseEntity<?> getOrders(@RequestHeader("token") String token) {
        String user = validateToken(token);
        if (user == null) return ResponseEntity.status(403).body("Unauthorized");
        List<Order> userOrders = new ArrayList<>();
        for (Order o : orders) {
            if (o.username.equals(user)) userOrders.add(o);
        }
        return ResponseEntity.ok(userOrders);
    }
}
